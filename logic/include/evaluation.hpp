#ifndef EVALUATION_HPP
#define EVALUATION_HPP

#include "constants.hpp"
#include "bit_operations.hpp"
#include "board.hpp"

#define multiply_based_on_color(expr, piece) (expr * (-1 + ((piece < BLACK) << 1)))
#define pretty_eval(s) (std::cout << "current evaluation of position: " << s << std::endl;)

constexpr int orient(int piece, int position) noexcept {
    return (position ^ ((piece > BLACK) * 56));
}


inline const std::array<int, 7> piece_values_mg = {0, 78, 307, 327, 498, 896, 0};
inline const std::array<int, 7> piece_values_eg = {0, 97, 306, 327, 498, 897, 0};

// TODO: check if these are actually better than normal piece values from simple_eval

inline constexpr int PIECE_TABLES_MG[384] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    -16, -15, 1, -4, 7, 20, 10, -5,
    6, -1, -6, 10, -5, -13, 16, 4,
    12, 16, 12, 39, 25, 6, 10, 12,
    26, 18, 27, 45, 72, 34, 27, 26,
    34, 32, 35, 58, 47, 50, 14, 29,
    67, 85, 90, 74, 68, 51, 50, 61,
    0, 0, 0, 0, 0, 0, 0, 0,
    // knight mg
    -37, -31, -18, -18, -19, -19, -31, -37,
    -28, -8, 10, 11, 10, 11, -8, -27,
    -19, 12, 9, 24, 25, 23, 16, -18,
    -17, 12, 26, 26, 29, 24, 10, -15,
    -18, 18, 28, 37, 31, 31, 19, -19,
    -17, 16, 37, 30, 29, 22, 15, -17,
    -27, -7, 14, 18, 19, 14, -7, -28,
    -37, -26, -16, -16, -16, -17, -25, -37,
    // bishop
    -18, -7, -18, -8, -8, -16, -7, -17,
    -6, 9, 3, 2, 10, 2, 22, -7,
    -5, 11, 13, 14, 12, 12, 12, -9,
    -8, 2, 13, 12, 12, 12, 2, -8,
    -7, 8, 5, 13, 12, 7, 9, -7,
    -10, 3, 6, 7, 11, 6, 2, -7,
    -8, -2, -1, 2, -1, 2, -11, -8,
    -17, -8, -6, -6, -7, -6, -7, -17,
    // rook mg
    -24, -2, 3, 0, 2, 9, 0, -26,
    -6, 0, -1, -2, -2, -1, 1, -4,
    -4, 1, 0, -1, -1, 0, 1, -4,
    -4, 1, 1, 1, 1, 1, 2, -3,
    -3, 2, 2, 1, 2, 2, 2, -3,
    -3, 2, 2, 2, 3, 2, 1, -3,
    8, 13, 13, 13, 13, 13, 12, 8,
    5, 2, -7, -13, -10, -16, 1, 14,
    // queen mg
    -16, -8, -9, 1, -4, -8, -6, -16,
    -5, 4, 5, 0, -1, 7, 2, -7,
    -6, 4, 8, 5, 5, 6, 8, -9,
    -1, 4, 8, 8, 8, 7, 4, 1,
    -2, 3, 9, 8, 8, 9, 2, 0,
    -7, 2, 8, 12, 11, 8, 3, -5,
    -8, 3, 2, 3, 2, 5, 5, -5,
    -16, -5, -4, -5, 1, -5, -6, -16,
    // king mg
     19,  28,   9,  -5, -13,   1, 38, 13,
     20,  19,  -1,  -3,  -4,  -2, 17, 19,
    -10, -20, -21, -21, -21, -21, -20, -11,
    -20, -30, -30, -40, -40, -30, -30, -20,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -41, -30,
    -31, -40, -40, -49, -49, -40, -42, -33,
    -30, -42, -45, -48, -42, -34, -87, -31,
};
inline constexpr int PIECE_TABLES_EG[384] {
    // pawn eg
    0, 0, 0, 0, 0, 0, 0, 0,
    -1, -4, 1, 3, 6, 15, 14, 5,
    5, -3, 8, 1, 8, 12, 9, 9,
    29, 23, 22, 32, 26, 29, 20, 29,
    37, 40, 36, 26, 33, 34, 40, 38,
    46, 52, 53, 55, 68, 55, 53, 48,
    53, 61, 58, 99, 98, 77, 59, 56,
    0, 0, 0, 0, 0, 0, 0, 0,
    // knight eg
    -36, -28, -17, -17, -17, -17, -27, -36,
    -27, -7, 12, 14, 15, 13, -7, -26,
    -17, 16, 19, 26, 27, 20, 17, -16,
    -17, 13, 27, 31, 32, 26, 13, -16,
    -17, 18, 28, 33, 32, 29, 18, -17,
    -16, 14, 23, 29, 29, 22, 14, -16,
    -26, -6, 14, 15, 15, 14, -6, -27,
    -36, -26, -16, -16, -16, -16, -26, -36,
    // bishop eg
    -18, -7, -13, -8, -8, -10, -7, -17,
    -7, 6, 2, 1, 4, 3, 9, -7,
    -7, 11, 12, 13, 13, 12, 12, -8,
    -8, 1, 12, 12, 12, 12, 2, -7,
    -8, 7, 5, 12, 11, 7, 8, -7,
    -8, 3, 6, 9, 8, 6, 3, -7,
    -8, 1, 2, 1, -1, 2, -3, -7,
    -17, -7, -7, -7, -7, -8, -7, -17,
    // rook eg
    -16, -3, -1, 1, 2, -4, 0, -8,
    -6, -2, -3, -3, -2, 0, 0, -4,
    -4, 0, 0, -1, 0, 0, 1, -3,
    -4, 1, 1, 0, 1, 1, 2, -3,
    -3, 1, 1, 1, 1, 1, 1, -3,
    -4, 2, 2, 1, 1, 1, 1, -4,
    7, 12, 13, 13, 13, 12, 12, 7,
    0, 1, -3, -8, -4, -7, 1, 3,
    // queen eg
    -17, -8, -8, -4, -3, -8, -7, -17,
    -7, 3, 2, 1, 1, 7, 2, -8,
    -7, 3, 7, 7, 7, 7, 7, -8,
    -2, 3, 7, 8, 7, 7, 3, 2,
    -2, 3, 7, 7, 7, 8, 2, -2,
    -7, 2, 7, 8, 8, 7, 3, -7,
    -8, 2, 3, 2, 2, 4, 3, -7,
    -17, -7, -6, -3, -1, -7, -7, -17,
    // king eg
    -51, -42, -33, -24, -28, -38, -56, -57,
    -31, -22, -12,  -5,  -6, -13, -24, -34,
    -31, -11,  17,  26,  27,  17, -11, -31,
    -31, -11,  29,  39,  39,  29, -11, -30,
    -30, -11,  29,  38,  38,  29, -11, -31,
    -30, -10,  20,  30,  29,  19, -12, -31,
    -31, -30,  -1,  1,    1,  -4, -34, -33,
    -50, -31, -33, -28, -28, -27, -55, -50,
};  


int evaluate(Board &chess_board) noexcept;

constexpr int get_perspective_eval(const int &eval, const int &turn) {
    return eval * (-1 + (turn << 1));
}

#endif // EVALUATION_HPP