#ifndef EVALUATION_HPP
#define EVALUATION_HPP

#include "constants.hpp"
#include "bit_operations.hpp"
#include "board.hpp"
#include "magic_values.hpp"

constexpr int orient(int piece, int position) noexcept {
    return (position ^ ((piece > BLACK) * 56));
}



// passed pawn masks
const BB passed_pawn_mask_white[8] = {0xFFFFFFFFFFFFFF00, 0xFFFFFFFFFFFF0000, 0xFFFFFFFFFF000000, 0xFFFFFFFF00000000, 0xFFFFFF0000000000, 0xFFFF000000000000, 0xFF00000000000000, 0x0000000000000000};
const BB passed_pawn_mask_black[8] = {0x0000000000000000, 0x00000000000000FF, 0x000000000000FFFF, 0x0000000000FFFFFF, 0x00000000FFFFFFFF, 0x000000FFFFFFFFFF, 0x0000FFFFFFFFFFFF, 0x00FFFFFFFFFFFFFF};

// 0.07626 mean squared error of predicting outcome of game

#define S(mg, eg) ((mg << 16) | eg)

const int PIECE_VALUES[7] = {
        S(0, 0), S(63, 99), S(247, 312), S(257, 328), S(331, 566), S(713, 1071), S(0, 0)
};

const int PIECE_SQUARE_TABLES[384] = {
        // pawn

        S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 
        S(47, 88), S(65, 88), S(68, 97), S(46, 103), S(39, 88), S(45, 99), S(44, 99), S(43, 106), 
        S(49, 86), S(50, 91), S(49, 93), S(47, 97), S(48, 90), S(48, 89), S(42, 98), S(40, 97), 
        S(57, 90), S(59, 97), S(70, 95), S(74, 89), S(76, 86), S(59, 91), S(53, 103), S(51, 106), 
        S(68, 102), S(72, 106), S(93, 93), S(94, 84), S(77, 85), S(73, 96), S(66, 109), S(58, 120), 
        S(74, 116), S(94, 112), S(146, 89), S(110, 62), S(108, 64), S(109, 97), S(72, 128), S(75, 131), 
        S(-46, 135), S(-23, 126), S(51, 90), S(76, 74), S(100, 70), S(62, 119), S(73, 121), S(67, 134), 
        S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 
        // knight

        S(191, 286), S(218, 284), S(232, 294), S(223, 301), S(223, 307), S(213, 306), S(215, 279), S(183, 294), 
        S(229, 306), S(245, 303), S(242, 311), S(249, 313), S(245, 321), S(239, 318), S(223, 305), S(216, 298), 
        S(233, 300), S(254, 313), S(255, 323), S(257, 333), S(257, 339), S(257, 329), S(246, 321), S(220, 299), 
        S(243, 305), S(258, 323), S(266, 333), S(277, 344), S(272, 346), S(270, 340), S(261, 325), S(238, 312), 
        S(274, 307), S(260, 334), S(303, 341), S(283, 347), S(304, 345), S(289, 342), S(265, 331), S(256, 318), 
        S(265, 299), S(275, 325), S(333, 326), S(303, 327), S(291, 341), S(281, 338), S(272, 326), S(251, 305), 
        S(253, 279), S(252, 307), S(298, 310), S(251, 311), S(271, 325), S(257, 327), S(242, 313), S(225, 291), 
        S(176, 230), S(180, 289), S(213, 282), S(262, 301), S(235, 301), S(212, 310), S(169, 292), S(138, 248), 
        // bishop

        S(263, 279), S(257, 309), S(241, 318), S(254, 319), S(252, 321), S(253, 301), S(261, 315), S(252, 303), 
        S(274, 300), S(277, 317), S(281, 317), S(264, 331), S(262, 330), S(277, 318), S(265, 316), S(260, 318), 
        S(260, 312), S(265, 322), S(267, 335), S(269, 346), S(267, 342), S(269, 341), S(269, 335), S(248, 318), 
        S(247, 318), S(266, 332), S(269, 338), S(274, 337), S(274, 344), S(261, 344), S(248, 340), S(254, 330), 
        S(247, 330), S(255, 338), S(272, 339), S(278, 338), S(273, 345), S(270, 342), S(259, 347), S(257, 333), 
        S(258, 337), S(272, 333), S(288, 341), S(266, 331), S(278, 332), S(271, 337), S(276, 332), S(268, 336), 
        S(223, 324), S(227, 333), S(260, 326), S(251, 327), S(262, 334), S(264, 329), S(257, 326), S(250, 317), 
        S(221, 318), S(241, 318), S(197, 328), S(204, 335), S(206, 333), S(238, 327), S(241, 329), S(242, 319), 
        // rook

        S(329, 556), S(339, 553), S(335, 558), S(336, 556), S(329, 559), S(328, 569), S(324, 563), S(324, 564), 
        S(323, 548), S(337, 542), S(331, 550), S(328, 557), S(322, 563), S(321, 561), S(313, 562), S(314, 558), 
        S(333, 539), S(344, 537), S(321, 556), S(326, 558), S(316, 566), S(317, 565), S(310, 561), S(308, 564), 
        S(327, 555), S(331, 553), S(312, 567), S(327, 565), S(324, 570), S(314, 570), S(309, 569), S(314, 572), 
        S(339, 557), S(342, 564), S(341, 557), S(336, 560), S(333, 570), S(331, 575), S(326, 573), S(324, 576), 
        S(361, 553), S(381, 554), S(361, 559), S(357, 554), S(335, 567), S(336, 573), S(344, 572), S(328, 578), 
        S(367, 565), S(341, 572), S(340, 574), S(325, 573), S(340, 572), S(326, 582), S(318, 584), S(326, 577), 
        S(349, 575), S(337, 581), S(352, 582), S(324, 582), S(320, 594), S(324, 592), S(315, 587), S(325, 584), 
        // queen

        S(704, 1023), S(709, 1031), S(694, 1039), S(706, 1058), S(705, 1058), S(699, 1062), S(694, 1046), S(694, 1041), 
        S(737, 992), S(730, 1011), S(723, 1039), S(716, 1066), S(715, 1068), S(714, 1054), S(711, 1049), S(702, 1046), 
        S(713, 1046), S(727, 1061), S(709, 1083), S(713, 1090), S(702, 1084), S(712, 1086), S(708, 1069), S(701, 1048), 
        S(718, 1069), S(717, 1079), S(708, 1093), S(715, 1100), S(713, 1106), S(705, 1092), S(704, 1090), S(705, 1072), 
        S(710, 1079), S(716, 1096), S(710, 1097), S(707, 1109), S(708, 1114), S(710, 1098), S(713, 1096), S(702, 1080), 
        S(738, 1062), S(744, 1074), S(745, 1096), S(713, 1108), S(720, 1098), S(724, 1101), S(719, 1075), S(717, 1062), 
        S(745, 1061), S(718, 1080), S(722, 1099), S(685, 1129), S(696, 1115), S(697, 1098), S(706, 1082), S(710, 1048), 
        S(703, 1046), S(764, 1016), S(725, 1069), S(720, 1068), S(729, 1057), S(705, 1076), S(689, 1065), S(679, 1057), 
        // king

        S(44, -66), S(31, -35), S(-35, -12), S(-5, -33), S(-52, -6), S(20, -24), S(49, -44), S(40, -60), 
        S(24, -30), S(1, -8), S(-29, 5), S(-49, 15), S(-44, 13), S(-24, 9), S(3, -3), S(46, -30), 
        S(-36, -6), S(-26, 1), S(-52, 14), S(-54, 25), S(-60, 24), S(-47, 18), S(-12, -2), S(-25, -16), 
        S(-116, 9), S(-70, 20), S(-60, 22), S(-88, 35), S(-88, 43), S(-56, 33), S(-45, 17), S(-58, -1), 
        S(-114, 18), S(-63, 36), S(-56, 42), S(-85, 49), S(-92, 52), S(-60, 41), S(-55, 30), S(-65, 2), 
        S(-39, 22), S(-11, 51), S(41, 40), S(-23, 49), S(-55, 52), S(-36, 48), S(14, 37), S(-101, 19), 
        S(-41, 20), S(6, 48), S(-11, 49), S(-2, 45), S(40, 23), S(-49, 42), S(-23, 33), S(-79, 7), 
        S(136, -91), S(15, -8), S(-27, 8), S(-46, 6), S(-80, 13), S(27, -25), S(20, -37), S(13, -77), 
};

const int KING_RING_ATTACKS[6] = {
        S(-12, 11), S(-11, 9), S(-26, 2), S(-20, 8), S(-14, -11), S(0, 0), 
};

const int KING_RING_DEFENSES[6] = {
        S(10, 0), S(7, 3), S(6, 3), S(2, 2), S(0, 3), 
};

const int PASSED_PAWN_RANK[6] = {
        S(-1, 10), S(-8, 17), S(-8, 35), S(10, 57), S(11, 105), S(70, 138), 
};

const int PROTECTED_PAWN_RANK[6] = {
        S(0, 0), S(12, 8), S(8, 2), S(8, 6), S(19, 21), S(112, 5), 
};

const int THREAT_BY_MINOR_PIECE[6] = {
        S(2, -17), S(-24, -20), S(-31, -31), S(-47, -15), S(-54, -12), S(0, 0), 
};

const int THREAT_BY_ROOK[6] = {
        S(-1, -22), S(-22, -27), S(-23, -27), S(-7, -11), S(-73, -19), S(0, 0), 
};

const int PAWN_SHIELDS[3] = {
        S(9, 0), S(14, -3), S(4, 2), 
};

const int ISOLATED_PAWN = S(-12, -7);

const int DOUBLED_PAWN = S(-1, -18);

const int ROOK_ON_OPEN_FILE = S(31, 19);

const int ROOK_ON_SEMI_OPEN_FILE = S(14, 6);

const int KING_ON_OPEN_FILE = S(-38, 7);

const int KING_ON_SEMI_OPEN_FILE = S(-20, 7);

const int BISHOP_PAIR = S(21, 50);

const int TEMPO = S(25, 19);

#undef S

int evaluate(const Board &chess_board) noexcept;
int see(Board &chess_board) noexcept;

constexpr int get_perspective_eval(const int eval, const int turn) {
    return eval * (-1 + (turn << 1));
}

#endif // EVALUATION_HPP