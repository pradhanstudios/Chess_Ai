#ifndef EVALUATION_HPP
#define EVALUATION_HPP

#include "constants.hpp"
#include "bit_operations.hpp"
#include "board.hpp"

#define multiply_based_on_color(expr, piece) (expr * (-1 + ((piece < BLACK) << 1)))
#define pretty_eval(s) (std::cout << "current evaluation of position: " << s << std::endl;)

constexpr int orient(int piece, int position) noexcept {
    return (position ^ ((piece > BLACK) * 56)) ^ 63 /*the piece tables are reversed*/;
}

// https://www.chessprogramming.org/Simplified_Evaluation_Function
inline const std::array<int, 7> piece_values = {0, 100, 320, 330, 500, 900, 0};

inline constexpr int PIECE_TABLES[6][64] = {
{ // pawns
    100, 100, 100, 100, 100, 100, 100, 100, 
    150, 150, 150, 150, 150, 150, 150, 150, 
    110, 110, 120, 140, 140, 120, 110, 110, 
    105, 105, 110, 135, 135, 110, 105, 105,
    100, 100, 100, 130, 130, 100, 100, 100,
    105,  95,  90,  80,  80,  90,  95, 105, 
    105, 110, 110,  80,  80, 110, 110, 105, 
    100, 100, 100, 100, 100, 100, 100, 100
},
{ // knights
    270, 280, 290, 290, 290, 290, 280, 270, 
    280, 300, 320, 320, 320, 320, 300, 280, 
    290, 320, 330, 335, 335, 330, 320, 290, 
    290, 325, 335, 340, 340, 335, 325, 290, 
    290, 320, 335, 340, 340, 335, 320, 290, 
    290, 325, 330, 335, 335, 330, 325, 290, 
    280, 300, 320, 325, 325, 320, 300, 280, 
    270, 280, 290, 290, 290, 290, 280, 270,
},
{ // bishops
    310, 320, 320, 320, 320, 320, 320, 310, 
    320, 330, 330, 330, 330, 330, 330, 320, 
    320, 330, 335, 340, 340, 335, 330, 320, 
    320, 335, 335, 340, 340, 335, 335, 320, 
    320, 330, 340, 340, 340, 340, 330, 320, 
    320, 340, 340, 340, 340, 340, 340, 320, 
    320, 335, 330, 330, 330, 330, 335, 320, 
    310, 320, 320, 320, 320, 320, 320, 310,
},
{ // rooks
    500, 500, 500, 500, 500, 500, 500, 500, 
    505, 510, 510, 510, 510, 510, 510, 505, 
    495, 500, 500, 500, 500, 500, 500, 495, 
    495, 500, 500, 500, 500, 500, 500, 495, 
    495, 500, 500, 500, 500, 500, 500, 495, 
    495, 500, 500, 500, 500, 500, 500, 495, 
    495, 500, 500, 500, 500, 500, 500, 495, 
    500, 500, 500, 505, 505, 500, 500, 500,
},
{ // queens
    880, 890, 890, 895, 895, 890, 890, 880, 
    890, 900, 900, 900, 900, 900, 900, 890, 
    890, 900, 905, 905, 905, 905, 900, 890, 
    895, 900, 905, 905, 905, 905, 900, 895, 
    900, 900, 905, 905, 905, 905, 900, 895, 
    890, 905, 905, 905, 905, 905, 900, 890, 
    890, 900, 905, 900, 900, 900, 900, 890, 
    880, 890, 890, 895, 895, 890, 890, 880
},
{ // king mg
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -20,-30,-30,-40,-40,-30,-30,-20,
    -10,-20,-20,-20,-20,-20,-20,-10,
     20, 20,  0,  0,  0,  0, 20, 20,
     20, 30, 10,  0,  0, 10, 30, 20
},
// { // king eg
//     -50,-40,-30,-20,-20,-30,-40,-50,
//     -30,-20,-10,  0,  0,-10,-20,-30,
//     -30,-10, 20, 30, 30, 20,-10,-30,
//     -30,-10, 30, 40, 40, 30,-10,-30,
//     -30,-10, 30, 40, 40, 30,-10,-30,
//     -30,-10, 20, 30, 30, 20,-10,-30,
//     -30,-30,  0,  0,  0,  0,-30,-30,
//     -50,-30,-30,-30,-30,-30,-30,-50
// }
};


int evaluate(Board &chess_board) noexcept;

constexpr int get_perspective_eval(const int &eval, const int &turn) {
    return eval * (-1 + (turn << 1));
}

#endif // EVALUATION_HPP